MAIN      START
          CALL    INPUT
          CALL    INPUT
          CALL    MULT
          CALL    OUTPUT
          RET
          END

;-------------------------------------------------------
;OUTPUT(n) -> void. args: [n, RETURN], return: [RETURN]
OUTPUT    START
          POP     GR7
          POP     GR1 ; 表示する数n
          XOR     GR2, GR2 ; 文字数 len
          XOR     GR5, GR5
          CPA     GR1, ZERO
          JMI     NEGATIVE
          JUMP    LOOP
NEGATIVE  LAD     GR5, 1 ; GR5=GR1が負(1)
          XOR     GR1, MASK ; ビット反転
          ADDA    GR1, =1
LOOP      PUSH    0, GR2
          PUSH    0, GR7
          PUSH    0, GR1
          LAD     GR3, 10 ; GR3 = 10
          PUSH    0, GR3
          CALL    DIV
          POP     GR3 ; GR3 = GR1 % 10
          POP     GR1 ; GR1 = GR1 / 10
          POP     GR7
          POP     GR2
          LAD     GR4, #0030
          ADDA    GR3, GR4; 数字を文字に変換(GR3 + #0030)
          ST      GR3, OBUFINV, GR2 ; 文字を保存
          LAD     GR2, 1, GR2 ; GR2(len)++
          CPA     GR1, =0 ; a/b == 0ならば
          JZE     BREAK
          JUMP    LOOP
BREAK     XOR     GR3, GR3 ; ループ変数 i
          SUBA    GR2, =1 ; GR2はlengthで1多いので, 1引く
          CPA     GR5, ZERO ; nが負の数である(GR5==1)ならば
          JZE     LOOPINV
          LD      GR4, MINUS
          ST      GR4, OBUF, GR3
          ADDA    GR3, =1
LOOPINV   CPA     GR2, =0
          JMI     FINISH
          LD      GR4, OBUFINV, GR2 ; 順番入れ替え (OBUFINV -> OBUF)
          ST      GR4, OBUF, GR3
          SUBA    GR2, =1
          ADDA    GR3, =1
          JUMP    LOOPINV
FINISH    ST      GR3, OLEN
          OUT     OBUF, OLEN
          PUSH    0, GR7
          RET
OBUF      DS      6
OLEN      DS      1
OBUFINV   DS      6 ; OBUFを逆順に並べたもの
ZERO      DC      0
MINUS     DC      '-'
MASK      DC      #FFFF
          END

;-------------------------------------------------------
; INPUT() -> number. args: [RETURN], return: [number, RETURN]
INPUT     START
          POP     GR7
          IN      IBUF, ILEN
          LD      GR1, ILEN ; GR1 = i = ILEN (1桁目から始める)
          SUBA    GR1, ONE ; i -= 1
          LAD     GR2, #0001 ; GR2 = 10^i
          XOR     GR3, GR3 ; GR3 = result
          LD      GR4, MINUS
LOOP      CPA     GR1, =0 ; i = ILEN - 1, i >= 0; i--
          JMI     BREAK ; i < 0 なら抜ける
          LD      GR5, IBUF, GR1
          CPA     GR4, GR5 ; GR5 == 'c'?
TEST      JZE     ISMINUS ; マイナスがあった場合ISMINUSにジャンプ
          LAD     GR6, #000F ; 数字マスク
          AND     GR5, GR6 ; GR5 = i桁目の数字
          PUSH    0, GR1 ; 退避
          PUSH    0, GR3 ; 退避
          PUSH    0, GR4 ; 退避
          PUSH    0, GR7
          PUSH    0, GR2 ; 退避
          PUSH    0, GR2 ; 10^i
          PUSH    0, GR5 ; i桁目の数字
          CALL    MULT
          POP     GR5 ; かけ算結果
          POP     GR2 ; 10^i
          PUSH    0, GR5 ; GR2とGR5の順番入れ替え
          PUSH    0, GR2
          LAD     GR1, 10 ; 10をPUSH
          PUSH    0, GR1
          CALL    MULT
          POP     GR2
          POP     GR5
          POP     GR7
          POP     GR4 ; 復帰
          POP     GR3 ; 復帰
          POP     GR1 ; 復帰

          ADDA    GR3, GR5 ; result += GR5
          SUBA    GR1, ONE ; i--
          JUMP    LOOP
ISMINUS   XOR     GR3, MASK
          ADDA    GR3, ONE
BREAK     PUSH    0, GR3 ; result
          PUSH    0, GR7
          RET
IBUF      DS      6       ; -32768-32767なので6
ILEN      DS      1
MINUS     DC      '-'
ZERO      DC      0
ONE       DC      1
MASK      DC      #FFFF
          END

;-------------------------------------------------------
; DIV(a, b) -> [a / b, a % b]. args: [a, b, RETURN], return: [a / b, a % b, RETURN]
DIV       START
          POP     GR7 ;RETURN
          POP     GR2 ;b
          POP     GR1 ;a
          XOR     GR3, GR3 ; 商
LOOP      SUBA    GR1, GR2
          JMI     BREAK
          LAD     GR3, 1, GR3
          JUMP    LOOP
BREAK     ADDA    GR1, GR2
          PUSH    0, GR3 ; 商 a/b
          PUSH    0, GR1 ; 余り a%b
          PUSH    0, GR7 ; RETURN
          RET
          END
;-------------------------------------------------------
; MULT(a, b) -> a * b. args: [a, b, RETURN], return: [result, RETURN]
MULT      START
          POP     GR7 ; GR7 = RETURN
          POP     GR2 ; GR2 = b
          POP     GR1 ; GR1 = a

          LD      GR4, GR1 ; GR4 = 負の数かどうか
          XOR     GR4, GR2
          SRL     GR4, 15

          PUSH    0, GR1
          PUSH    0, GR4
          PUSH    0, GR7
          PUSH    0, GR2 ; b = |b|
          CALL    ABS
          POP     GR2
          POP     GR7
          POP     GR4
          POP     GR1

          PUSH    0, GR2
          PUSH    0, GR4
          PUSH    0, GR7
          PUSH    0, GR1 ; a = |a|
          CALL    ABS
          POP     GR1
          POP     GR7
          POP     GR4
          POP     GR2

          XOR     GR3, GR3 ; GR3 = result

LOOP      CPA     GR2, =0 ; b == 0 ?
          JZE     BREAK ;b == 0なら抜ける
          LD      GR5, GR2 ; bをGR4にコピー
          AND     GR5, ONE ; b &= 1
          JZE     NEXT ; b の1bit目が0ならNEXTへ
          ADDA    GR3, GR1 ; result += a を左シフトしたもの
NEXT      SRL     GR2, 1 ; b >> 1
          SLL     GR1, 1 ; a << 1
          JUMP    LOOP
BREAK     CPA     GR4, ONE ; GR4が1 (aとbのどちらかが負) ならば
          JNZ     NOTMINUS
          XOR     GR3, MASK ; GR3を負にする
          ADDA    GR3, ONE
NOTMINUS  PUSH    0, GR3 ; result
          PUSH    0, GR7 ; RETURN
          RET
ONE       DC      1
MASK      DC      #FFFF
          END

;-------------------------------------------------------
; ABS(a) -> |a|. args: [a, RETURN], return: [|a|, RETURN]
ABS       START
          POP     GR7 ; GR7 = RETURN
          POP     GR1 ; GR0 = a
          CPA     GR1, ZERO
          JPL     ONPLUS ; GR0 > 0 なら抜ける
          XOR     GR1, MASK ; 符号反転
          ADDA    GR1, ONE
ONPLUS    PUSH    0, GR1
          PUSH    0, GR7
          RET
ZERO      DC      0
ONE       DC      1
MASK      DC      #FFFF
          END